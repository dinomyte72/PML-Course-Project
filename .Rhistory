mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
g <-ggplot(mtcars, aes(x=am, y=mpg)) + geom_jitter() + geom_smooth(method=lm)
g
data(mtcars)
g <-ggplot(mtcars, aes(x=am, y=mpg)) + geom_jitter() + geom_smooth(method=lm)
g
mtcars$am <- as.factor(mtcars$am)
require(stats); require(graphics)
pairs(mtcars, panel=panel.smooth, main="Motor Trend MPG data")
library(ggplot2)
#g <- ggplot(mtcars) + geom_point(shape=1,alpha=0.7,aes(y=mpg, x=am, color=mtcars$am))
#g <- g + xlab("Transmission Type") + ylab("Miles per Gallon") + ggtitle("MPG per Transmission Type")
#g <- g + geom_smooth(method="lm")
g <-ggplot(mtcars, aes(x=am, y=mpg)) + geom_jitter() + geom_smooth(method=lm)
g
g <-ggplot(mtcars, aes(x=am, y=mpg)) + geom_jitter() + geom_smooth(aes(group=1,method=lm)
g
g <-ggplot(mtcars, aes(x=am, y=mpg)) + geom_jitter() + geom_smooth(aes(group=1,method=lm))
g
data(mtcars)
g <- ggplot(mtcars) + geom_point(shape=1,alpha=0.7,aes(y=mpg, x=am, color=mtcars$am))
g <- g + xlab("Transmission Type") + ylab("Miles per Gallon") + ggtitle("MPG per Transmission Type")
g <- g + geom_smooth(method="lm")
g
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
mtcars$am <- as.factor(mtcars$am)
str(mtcars)
head(mtcars)
mtcars$am <- as.factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
str(mtcars)
head(mtcars)
mtcars$am <- factor(mtcars$am, labels=c("Manual", "Automatic"))
str(mtcars)
head(mtcars)
install.packages("leaps")
library(leaps)
attach(mtcars)
leaps<-regsubsets(mpg~cyl+carb+wt+am,data=mtcars,nbest=10)
# view results
summary(leaps)
# plot a table of models showing variables in each model.
# models are ordered by the selection statistic.
plot(leaps,scale="r2")
# plot statistic by subset size
library(car)
subsets(leaps, statistic="rsq")
fit_am <- lm(mpg ~ am, data = mtcars)
fit_amCyl <- lm(mpg ~ am + cyl, data = mtcars)
fit_amCylCarb <- lm(mpg ~ am + cyl + carb, data = mtcars)
fit_amCylCarbWt <- lm (mpg ~ am + cyl + carb + wt, data = mtcars)
models <- c("fit_am", "fit_amCyl", "fit_amCylCarb", "fit_amCylCarbWt")
model_names <- c("fit_am", "fit_amCyl", "fit_amCylCarb", "fit_amCylCarbWt")
model_names <- c("fit_am", "fit_amCyl", "fit_amCylCarb", "fit_amCylCarbWt")
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(model_names[i])$adj.r.squared
}
model <- data.frame("Model","Adj. R-Squared")
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(model_names[i])$adj.r.squared
}
model[i,"Adj. R-Squared"] <- summary(I(model_names[i]))$adj.r.squared
model[i,"Adj. R-Squared"] <- summary(fit_am)$adj.r.squared
View(model)
View(model)
View(model)
View(model)
View(model)
fit0 <- lm(mpg ~ am, data = mtcars)
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
fit3 <- lm (mpg ~ am + cyl + disp + wt, data = mtcars)
model <- data.frame("Model","Adj. R-Squared")
View(model)
View(model)
model <- data.frame()
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(fit_am)$adj.r.squared
}
View(model)
View(model)
model_names <- c("fit0", "fit1", "fit2", "fit3")
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(fit[i])$adj.r.squared
}
View(model)
View(model)
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(fit[i])$adj.r.squared
}
for (i in 1:length(model_names)){
model[i,"Model"] <- model_names[i]
model[i,"Adj. R-Squared"] <- summary(model_names[i])$adj.r.squared
}
View(model)
View(model)
View(model)
View(model)
View(model)
View(model)
View(model)
View(model)
model_names[1]
model_names[2]
model <- data.frame()
fit0 <- lm(mpg ~ am, data = mtcars)
model[1,] < c("fit0", summary(fit0)$adj.r.squared)
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
model[2,] < c("fit1", summary(fit1)$adj.r.squared)
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
model[3,] < c("fit2", summary(fit2)$adj.r.squared)
fit3 <- lm (mpg ~ lm + cyl + disp + wt, data = mtcars)
model[4,] < c("fit3", summary(fit3)$adj.r.squared)
model <- data.frame()
fit0 <- lm(mpg ~ am, data = mtcars)
model[1,1] <- "fit0"
model[1,2] <- summary(fit0)$adj.r.squared)
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
model[2,1] <- "fit1"
model[2,2] <- summary(fit1)$adj.r.squared)
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
model[3,1] <- "fit2"
model[3,2] <- summary(fit2)$adj.r.squared)
fit3 <- lm (mpg ~ lm + cyl + disp + wt, data = mtcars)
model[4,1] <- "fit3"
model[4,2] <- summary(fit3)$adj.r.squared)
model <- data.frame()
fit0 <- lm(mpg ~ am, data = mtcars)
model[1,1] <- "fit0"
model[1,2] <- summary(fit0)$adj.r.squared
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
model[2,1] <- "fit1"
model[2,2] <- summary(fit1)$adj.r.squared
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
model[3,1] <- "fit2"
model[3,2] <- summary(fit2)$adj.r.squared
fit3 <- lm (mpg ~ lm + cyl + disp + wt, data = mtcars)
model[4,1] <- "fit3"
model[4,2] <- summary(fit3)$adj.r.squared
fit3 <- lm(mpg ~ lm + cyl + disp + wt, data = mtcars)
fit3 <- lm(mpg ~ am + cyl + disp + wt, data = mtcars)
model[4,1] <- "fit3"
model[4,2] <- summary(fit3)$adj.r.squared
View(model)
View(model)
fit4 <- lm(mpg ~ cyl + disp, data = mtcars)
model[5,1] <- "fit4"
model[5,2] <- summary(fit4)$adj.r.squared
View(model)
View(model)
fit4 <- lm(mpg ~ cyl + wt, data = mtcars)
model[5,1] <- "fit4"
model[5,2] <- summary(fit4)$adj.r.squared
View(model)
View(model)
fit5 <- lm(mpg ~ cyl + wt + am, data = mtcars)
model[6,1] <- "fit5"
model[6,2] <- summary(fit4)$adj.r.squared
View(model)
View(model)
fit5 <- lm(mpg ~ cyl + wt + am, data = mtcars)
model[6,1] <- "fit5"
model[6,2] <- summary(fit5)$adj.r.squared
View(model)
View(model)
fit5 <- lm(mpg ~ cyl + wt + disp, data = mtcars)
model[6,1] <- "fit5"
model[6,2] <- summary(fit5)$adj.r.squared
View(model)
View(model)
model <- data.frame()
fit0 <- lm(mpg ~ am, data = mtcars)
model[1,1] <- "Transmission Type"
model[1,2] <- summary(fit0)$adj.r.squared
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
model[2,1] <- "Transmission Type, Cylinder"
model[2,2] <- summary(fit1)$adj.r.squared
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
model[3,1] <- "Transmission Type, Cylinder, Engine Displacement"
model[3,2] <- summary(fit2)$adj.r.squared
fit3 <- lm(mpg ~ am + cyl + disp + wt, data = mtcars)
model[4,1] <- "Transmission Type, Cylinder, Engine Displacement, Weight"
model[4,2] <- summary(fit3)$adj.r.squared
fit4 <- lm(mpg ~ cyl + wt, data = mtcars)
model[5,1] <- "Cylinder, Weight"
model[5,2] <- summary(fit4)$adj.r.squared
fit5 <- lm(mpg ~ cyl + wt + disp, data = mtcars)
model[6,1] <- "Cylinder, Weight, Displacement"
model[6,2] <- summary(fit5)$adj.r.squared
}
```
model <- data.frame()
fit0 <- lm(mpg ~ am, data = mtcars)
model[1,1] <- "Transmission Type"
model[1,2] <- summary(fit0)$adj.r.squared
fit1 <- lm(mpg ~ am + cyl, data = mtcars)
model[2,1] <- "Transmission Type, Cylinder"
model[2,2] <- summary(fit1)$adj.r.squared
fit2 <- lm(mpg ~ am + cyl + disp, data = mtcars)
model[3,1] <- "Transmission Type, Cylinder, Engine Displacement"
model[3,2] <- summary(fit2)$adj.r.squared
fit3 <- lm(mpg ~ am + cyl + disp + wt, data = mtcars)
model[4,1] <- "Transmission Type, Cylinder, Engine Displacement, Weight"
model[4,2] <- summary(fit3)$adj.r.squared
fit4 <- lm(mpg ~ cyl + wt, data = mtcars)
model[5,1] <- "Cylinder, Weight"
model[5,2] <- summary(fit4)$adj.r.squared
fit5 <- lm(mpg ~ cyl + wt + disp, data = mtcars)
model[6,1] <- "Cylinder, Weight, Displacement"
model[6,2] <- summary(fit5)$adj.r.squared
View(model)
View(model)
names(model) <- c("Variables Included", "Adj. R-Squared")
View(model)
View(model)
View(model)
View(model)
res_fit4 <- resid(fit4)
plot(res_fit4)
qqnorm(res_fit4)
qqline(res_fit4)
qqnorm(res_fit4);qqline(res_fit4)
*************
?mfrow
??mfrow
par(mfrow = c(2,2))
plot(fit5)
plot(fit5)
par(mar = rep(2, 4))
par(mfrow = c(2,2))
plot(fit5)
summary(fit5)$coef
data(mtcars)
fit5 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit5)$coef
calplot(fit5)
plot(mpp ~ cyl + wt, data=mtcars)
abline(fit5)
ggplot(mtcars, aes(x=cyl+wt, y=mpg)) +
geom_point() +
stat_smooth(method="lm",col="red")
ggplotRegression(fit5)
summary(fit_am)
result <- t.test(mpg~am)
result
summary(fit_am)$p.value
summary(fit_am)$pvalue
summary(fit_am)$fstatistic
summary(fit_am)$p-value
summary(fit_am)$p
names(summary(fit))
names(summary(fit_am))
summary(fit_am)$cov.unscaled
summary(fit_am)$terms
summary(fit_am)$fstatistic
f <- summary(fit_am)$fstatistic
p <- pf(f[1],f[2],f[3], lower.tail=FALSE)
p
fit_all <- lm(mpg ~ ., data = mtcars)
fit_stepped <- step(fit_all, k=log(nrow(mtcars)))
summary(fit_stepped)
?mtcars
fit_all <- lm(mpg ~ ., data = mtcars)
fit_stepped <- step(fit_all, k=log(nrow(mtcars)))
summary(fit_stepped)
```
The results of the above yield a model that includes the predictors for mpg: Weight (wt), Quarter-Mile Time (qsec) and Transmission (am). The adjusted R-squared for this model is `r summary(fit_stepped)$adj.r.squared`. In this model, when all other variables are held constant:
- An increase in 1000lbs of weight will result in a decrease of `r summary(fit_stepped)$coef[2]` mpg;
- An increase in 1sec in quarter-mile time will result in a decrease of `r summary(fit_stepped)$coef[3]` mpg;
- A Manual transmission will increase the fuel efficiency by `r summary(fit_stepped)$coef[4]` mpg.
## Residual Analysis of Stepped Model
dkdkd
kdkdkd
setwd("/Users/Dino/Documents/Coursera/Data Science Specialization/8 - Practical Machine Learning/PML-Course-Project")
library(caret, quietly=TRUE)
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv')
download.file(url = url_train, destfile = 'data_train.csv', method="curl")
download.file(url = url_test, destfile = 'data_test.csv', method="curl")
train <- read.csv(file = 'data_train.csv',
na.strings = c('NA','#DIV/0!',''))
setwd("/Users/Dino/Documents/Coursera/Data Science Specialization/8 - Practical Machine Learning/PML-Course-Project")
library(caret)
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv', method="curl")
url_train <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv', method="curl")
download.file(url = url_test, destfile = 'data_test.csv', method="curl")
train <- read.csv(file = 'data_train.csv',
na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = 'data_test.csv',
na.strings = c('NA','#DIV/0!',''))
```
test <- read.csv(file = 'data_test.csv',
na.strings = c('NA','#DIV/0!',''))
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv', method="curl")
train <- read.csv(url_train)
url_train <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
train <- read.csv(url_train)
url_test <- 'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
train <- read.csv(url_test)
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(url = url_train, destfile = 'data_train.csv', mode= "w", method="curl")
download.file(url = url_test, destfile = 'data_test.csv', mode = "w", method="curl")
url_train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url = url_train, destfile = 'data_train.csv', mode= "w", method="curl")
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
url_train <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url = url_train, destfile = "data_train.csv", mode= "w", method="curl")
download.file(url = url_train, destfile = "data_train.csv", mode= "w", method="curl")
download.file(url = url_test, destfile = "data_test.csv", mode = "w", method="curl")
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
View(test)
View(test)
View(train)
View(train)
download.file(url = url_test, destfile = "data_test.csv", mode = "w", method="curl")
download.file(url = url_train, destfile = "data_train.csv", mode= "w", method="curl")
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
url_train <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_test <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url = url_train, destfile = "data_train.csv", mode= "w", method="curl")
download.file(url = url_test, destfile = "data_test.csv", mode = "w", method="curl")
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
download.file(url = url_train, destfile = "data_train.csv", mode= "w", method="curl")
download.file(url = url_test, destfile = "data_test.csv", mode = "w", method="curl")
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
download.file(url = url_test, destfile = "data_test.csv", mode = "w", method="curl")
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
for(i in c(8:ncol(pml_train)-1)) {
pml_train[,i] = as.numeric(as.character(pml_train[,i]))
pml_test[,i] = as.numeric(as.character(pml_test[,i]))
}
for(i in c(8:ncol(train)-1)) {
train[,i] = as.numeric(as.character(train[,i]))
test[,i] = as.numeric(as.character(test[,i]))
}
feature_index <- colnames(pml_train)
feature_index <- colnames(pml_train[colSums(is.na(pml_train)) == 0])
feature_index <- feature_index[-c(1:7)]
feature_index <- colnames(train)
feature_index <- colnames(train[colSums(is.na(train)) == 0])
feature_index <- feature_index[-c(1:7)]
set.seed(1300)
index_train <- createDataPartition(y=train$classe, p=0.80, list=FALSE)
data_train <- train[index_train,feature_index]
data_xval <- train[-index_train,feature_index]
dim(data_train); dim(data_xval)
set.seed(1972)
index_train <- createDataPartition(y=train$classe, p=0.80, list=FALSE)
data_train <- train[index_train,feature_index]
data_xval <- train[-index_train,feature_index]
dim(data_train); dim(data_xval)
?hist
str(train)
View(train)
View(train)
View(data_xval)
View(data_xval)
hist(data_train$classe)
View(data_train)
View(data_train)
hist(as.numeric(data_train$classe))
?hist
hist(as.numeric(data_train$classe),
col = "blue",
main = "Frequency of Exercise Class in Trainind Dataset",
xlab = "Exercise Class",
ylab = "Frequency",
density = 100
)
?hist
library(ggplot2)
qplot(data_train$classe,
geom = "histogram",
binwidth = 1,
main = "Frequency of Exercise Class in Training Data",
xlab = "Exercise Class",
ylab = "Frequency",
fill = "turquoise",
col = "blue",
)
qplot(data_train$classe,
geom = "histogram",
binwidth = 1,
main = "Frequency of Exercise Class in Training Data",
xlab = "Exercise Class",
ylab = "Frequency",
fill = I("turquoise"),
col = I("blue"),
)
qplot(data_train$classe,
geom = "histogram",
binwidth = 1,
main = "Frequency of Exercise Class in Training Data",
xlab = "Exercise Class",
ylab = "Frequency",
fill = I("turquoise"),
col = I("blue"),
alpha = I(.2),
)
library(ggplot2)
qplot(data_train$classe,
geom = "histogram",
binwidth = 1,
main = "Frequency of Exercise Class in Training Data",
xlab = "Exercise Class",
ylab = "Frequency",
fill = I("turquoise"),
col = I("blue")
)
ncol(train)
ncol(feature_index)
length(feature_index)
feature_index
feature_index <- colnames(train)
feature_index <- colnames(train[colSums(is.na(train)) == 0])
feature_index <- feature_index[-c(1:7)]
rf_confMatrix
train <- read.csv(file = "data_train.csv", na.strings = c('NA','#DIV/0!',''))
test <- read.csv(file = "data_test.csv", na.strings = c('NA','#DIV/0!',''))
for (i in c(8:ncol(train)-1)) {
train[,i] = as.numeric(as.character(train[,i]))
test[,i] = as.numeric(as.character(test[,i]))
}
index <- colnames(train)
index <- colnames(train[colSums(is.na(train)) == 0])
index <- index[-c(1:7)]
library(caret)
set.seed(1972)
train_index <- createDataPartition(y=train$classe, p=0.80, list=FALSE)
train_ds <- train[train_index,index]
validate_ds <- train[-train_index,index]
dim(train_ds)
dim(validate_ds)
library(ggplot2)
qplot(train_ds$classe,
geom = "histogram",
binwidth = 1,
main = "Frequency of Exercise Class in Training Data",
xlab = "Exercise Class",
ylab = "Frequency",
fill = I("turquoise"),
col = I("blue")
)
rf_model <- train(classe ~ ., data = train_ds, method = 'rf', trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE, verboseIter = TRUE))
rf_predict <- predict(rf_model,validate_ds)
rf_confMatrix <- confusionMatrix(rf_predict,validate_ds$classe)
rf_confMatrix
names(summary(rf_confMatrix))
names(rf_confMatrix)
rf_confMatrix$positive
rf_confMatrix$table
plot(rf_confMatrix$table)
hit(rf_confMatrix$table)
hist(rf_confMatrix$table)
100*(1-18/3923)
?round
round(100*(1-18/3923),2)
rf_confMatrix$overall
round(100*(1-22/3923),2)
rf_confMatrix$overall[1]
View(test)
View(test)
names(test)
test$problem_id
rf_test <- predict(rf_model, test[,index])
colnames(test)[length(colnames(test))] <- 'classe'
rf_test <- predict(rf_model, test[,index])
rf_test
length(fr_test)
length(rf_test)
if (!file.exists("answers")) {
dir.create("answers")
}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("./answers/","problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(rf_test)
